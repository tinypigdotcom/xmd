#!/cygdrive/c/Strawberry/perl/bin/perl

use strict;
use warnings FATAL => 'all';

use Data::Dumper;
use IO::File;
use Perl::Tidy;
use Text::MultiMarkdown 'markdown';

my $source_string;
my $dest_string;
my $stderr_string;
my $errorfile_string;
my $argv = "-npro -pbp -nst -se -html -ntoc -pre";
my $error;
my $output;

sub output {
    $output .= join('',@_);
}

sub trim {
    $_[0] =~ s{^\s*}{};
    $_[0] =~ s{\s*$}{};
}

sub xmd {
    my ($infile) = @_;
    $infile ||= "example.mmd";
    my $ifh = IO::File->new($infile, '<');
    die if (!defined $ifh);

    my $end=0;
    my $namespace='';
    my $perl_on=0;
    my $control=0;
    while(my $line = <$ifh>) {
        chomp $line;
        $end=0;
        $control=0;
        if ( $line =~ m{^\s*<(/)?perl\b([^<]*)>\s*$} ) {
            $end = $1 ? 1 : 0;
            if(0) {
                output("\n\n{$source_string}\n\n");
                $source_string='';
            }
            elsif($end) {
                $error = Perl::Tidy::perltidy(
                    argv        => $argv,
                    source      => \$source_string,
                    destination => \$dest_string,
                    stderr      => \$stderr_string,
                    errorfile   => \$errorfile_string,
                );

                if ($error) {
                    # serious error in input parameters, no tidied output
                    output("<<STDERR>>\n$stderr_string\n");
                    die "Exiting because of serious errors\n";
                }

                if ($dest_string) {
                    $namespace ||= 'new';
                    for ($dest_string) {
                        s{( class=")}{$1$namespace-}g;
                        s{<pre>}{<pre class="$namespace"><ol>}g;
                        s{</pre>}{</ol></pre>}g;
                        s{<a [^>]*>[^<]*</a>}{}g;
                        s{^(\s*\d+)}{<span class="num">$1.</span>}gm;
                        s{^( *<span.*span> *)$}{<li>    $1</li>}gm;
                    }
                    output($dest_string);
                }
                $source_string='';
            }

            $perl_on = $end ? 0 : 1;
            $namespace = $2 || '';
            trim($namespace);
            $control=1;
        }
        next if $control;
        if ($perl_on) {
            $source_string .= "${line}\n";
        }
        else {
            output("$line\n") if $line;
        }
    }
    $ifh->close;
    my $html = markdown($output);

    $ifh = IO::File->new('full_template', '<');
    die if (!defined $ifh);
    my $contents = do { local $/; <$ifh> };

    print "$contents$html";
}

sub main {
    my @argv = @_;
    xmd(@argv);
    return;
}

my $rc = ( main(@ARGV) || 0 );

exit $rc;

